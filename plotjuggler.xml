<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget parent="main_window" name="Main Window">
  <Tab tab_name="InfraLoc" containers="1">
   <Container>
    <DockSplitter sizes="0.500545;0.499455" orientation="-" count="2">
     <DockArea name="SignalstÃ¤rke">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="0.000000" right="51.164870" top="20529.993103" left="41.312443"/>
       <limitY min="0"/>
       <curve color="#d62728" name="rssi/1"/>
       <curve color="#1ac938" name="rssi/2"/>
       <curve color="#1f77b4" name="rssi/3"/>
      </plot>
     </DockArea>
     <DockArea name="Winkel">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="0.000000" right="51.164870" top="360.000000" left="41.312443"/>
       <limitY max="360" min="0"/>
       <curve color="#d62728" name="angle/1"/>
       <curve color="#1ac938" name="angle/2"/>
       <curve color="#1f77b4" name="angle/3"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="0"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <parameters delimiter="0" time_axis=""/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS2 bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
   <selected_topics value=""/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="ROS2 Topic Subscriber">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
   <selected_topics value="/aoa;/bucket_strength"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;&#xa;-- Safely compare Floating point numbers&#xa;function fequals(a, b)&#xa;    return math.abs(a - b) &lt; 0.0000001&#xa;end"/>
   <scripts>
    <script global="angle_1 = Timeseries.new(&quot;angle/1&quot;)&#xa;angle_2 = Timeseries.new(&quot;angle/2&quot;)&#xa;angle_3 = Timeseries.new(&quot;angle/3&quot;)&#xa;&#xa;rssi_1 = Timeseries.new(&quot;rssi/1&quot;)&#xa;rssi_2 = Timeseries.new(&quot;rssi/2&quot;)&#xa;rssi_3 = Timeseries.new(&quot;rssi/3&quot;)&#xa;&#xa;last_tick = 0&#xa;&#xa;freq_1 = 12500&#xa;freq_2 = 15625&#xa;freq_3 = 18750" name="SplitFrequencies" function="aoas = TimeseriesView.find(&quot;/aoa/angle&quot;)&#xa;freqs = TimeseriesView.find(&quot;/aoa/freq&quot;)&#xa;rssis = TimeseriesView.find(&quot;/aoa/rssi&quot;)&#xa;&#xa;-- Filter out nil&#xa;if aoas == nil or freqs == nil then&#xa;    print(&quot;[ERR] nil in data&quot;)&#xa;    return&#xa;end&#xa;&#xa;-- Make sure no time overflow happened&#xa;if last_tick > tracker_time then&#xa;    print(&quot;Scrubbing in the past&quot;)&#xa;    -- return&#xa;end&#xa;&#xa;-- Sanity check array length&#xa;if aoas:size() ~= freqs:size() then&#xa;    print(&quot;[ERR] data series don't have the same length&quot;)&#xa;    return&#xa;end&#xa;&#xa;i = freqs:size()&#xa;while i > 0 do&#xa;    t_freq, current_freq = freqs:at(i)&#xa;    t_ang, current_angle = aoas:at(i)&#xa;    t_rssi, current_rssi = rssis:at(i)&#xa;    &#xa;    -- End the loop when the timestamp of the last call is found&#xa;    if fequals(t_freq, last_tick) then break end&#xa;    &#xa;    -- Filter out nil&#xa;    if current_freq == nil or current_angle == nil then&#xa;        print(&quot;[ERR] datapoint is nil&quot;)&#xa;        return&#xa;    end&#xa;    &#xa;    -- Angle and Freq at the same index should also have the same time&#xa;    if not fequals(t_freq, t_ang) then&#xa;        print(&quot;[ERR] (&quot; .. i .. &quot;) &quot; .. t_freq .. &quot;!=&quot; .. t_ang)&#xa;        -- return&#xa;    end&#xa;&#xa;    -- Sort by frequency&#xa;    if fequals(current_freq, freq_1) then&#xa;        angle_1:push_back(t_ang, current_angle)&#xa;        rssi_1:push_back(t_rssi, current_rssi)&#xa;    elseif fequals(current_freq, freq_2) then&#xa;        angle_2:push_back(t_ang, current_angle)&#xa;        rssi_2:push_back(t_rssi, current_rssi)&#xa;    elseif fequals(current_freq, freq_3) then&#xa;        angle_3:push_back(t_ang, current_angle)&#xa;        rssi_3:push_back(t_rssi, current_rssi)&#xa;    end&#xa;    i = i-1&#xa;end&#xa;&#xa;last_tick = tracker_time"/>
   </scripts>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS2 Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles/>
 <previouslyLoaded_Streamer name="ROS2 Topic Subscriber"/>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations/>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>
